# -*- coding: utf-8 -*-
"""modelo_distilbert.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16JJe-2K--9Defs2y8ItH07vUGMTQfL3m
"""

import pandas as pd
from transformers import AutoTokenizer, AutoModelForTokenClassification
import requests

# Carga el modelo y el tokenizador
tokenizer = AutoTokenizer.from_pretrained("dccuchile/distilbert-base-spanish-uncased-finetuned-ner")
model = AutoModelForTokenClassification.from_pretrained("dccuchile/distilbert-base-spanish-uncased-finetuned-ner")

# Define una funci√≥n de consulta
API_URL = "https://api-inference.huggingface.co/models/dccuchile/distilbert-base-spanish-uncased-finetuned-ner"
headers = {"Authorization": "Bearer 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"}

def query(payload):
    response = requests.post(API_URL, headers=headers, json=payload)
    return response.json()

# Carga el archivo csv
df = pd.read_csv('/content/drive/MyDrive/ECU_911_processed.csv')

# Itera sobre cada fila del dataframe
for index, row in df.iterrows():
    # Realiza la consulta
    output = query({"inputs": row['ATA_TEXTO']})

    # Imprime el ID de la llamada una vez
    print(f"ID LLAMADA: {row['TRA_ID']}")

    # Procesa la salida
    for entity in output:
        # Filtra por tipo 'LABEL_0'
        if entity['entity_group'] != 'LABEL_0':
            print(f"Entidad: {entity['word']}, Tipo: {entity['entity_group']}, Confianza: {entity['score']}")

import pandas as pd

# Cargar el archivo .csv
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ecuPrueba_Alertante.csv')

# Agrupar por 'TRA_ID' y unir las celdas de 'ATA_TEXTO' con comas
df = df.groupby('TRA_ID')['ATA_TEXTO'].apply('. '.join).reset_index()

# Mostrar el DataFrame
print(df)

df.to_csv('/content/drive/MyDrive/Colab Notebooks/ecuPrueba_Alertante1.csv', index=False)